import { OnModuleInit, OnModuleDestroy } from '@nestjs/common';
export declare class PrismaService implements OnModuleInit, OnModuleDestroy {
    private readonly prisma;
    onModuleInit(): Promise<void>;
    onModuleDestroy(): Promise<void>;
    get client(): import("generated/prisma/runtime/library").DynamicClientExtensionThis<import("../../generated/prisma").Prisma.TypeMap<import("generated/prisma/runtime/library").InternalArgs & {
        result: {};
        model: {
            $allModels: {
                aggregate: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "aggregate">>;
                count: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "count">>;
                findFirst: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findFirst"> | null>;
                findFirstOrThrow: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findFirstOrThrow">>;
                findMany: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findMany">>;
                findUnique: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findUnique"> | null>;
                findUniqueOrThrow: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findUniqueOrThrow">>;
                groupBy: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "groupBy">>;
            };
            absence: {
                aggregate: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "aggregate">>;
                count: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "count">>;
                findFirst: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findFirst"> | null>;
                findFirstOrThrow: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findFirstOrThrow">>;
                findMany: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findMany">>;
                findUnique: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findUnique"> | null>;
                findUniqueOrThrow: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findUniqueOrThrow">>;
                groupBy: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "groupBy">>;
            };
            company: {
                aggregate: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "aggregate">>;
                count: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "count">>;
                findFirst: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findFirst"> | null>;
                findFirstOrThrow: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findFirstOrThrow">>;
                findMany: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findMany">>;
                findUnique: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findUnique"> | null>;
                findUniqueOrThrow: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findUniqueOrThrow">>;
                groupBy: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "groupBy">>;
            };
            employee: {
                aggregate: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "aggregate">>;
                count: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "count">>;
                findFirst: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findFirst"> | null>;
                findFirstOrThrow: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findFirstOrThrow">>;
                findMany: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findMany">>;
                findUnique: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findUnique"> | null>;
                findUniqueOrThrow: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findUniqueOrThrow">>;
                groupBy: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "groupBy">>;
            };
            ticket: {
                aggregate: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "aggregate">>;
                count: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "count">>;
                findFirst: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findFirst"> | null>;
                findFirstOrThrow: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findFirstOrThrow">>;
                findMany: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findMany">>;
                findUnique: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findUnique"> | null>;
                findUniqueOrThrow: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findUniqueOrThrow">>;
                groupBy: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "groupBy">>;
            };
            snack: {
                aggregate: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "aggregate">>;
                count: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "count">>;
                findFirst: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findFirst"> | null>;
                findFirstOrThrow: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findFirstOrThrow">>;
                findMany: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findMany">>;
                findUnique: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findUnique"> | null>;
                findUniqueOrThrow: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findUniqueOrThrow">>;
                groupBy: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "groupBy">>;
            };
            user: {
                aggregate: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "aggregate">>;
                count: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "count">>;
                findFirst: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findFirst"> | null>;
                findFirstOrThrow: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findFirstOrThrow">>;
                findMany: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findMany">>;
                findUnique: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findUnique"> | null>;
                findUniqueOrThrow: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findUniqueOrThrow">>;
                groupBy: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "groupBy">>;
            };
        };
        query: {};
        client: {
            $accelerate: () => {
                invalidate: (input: import("@prisma/extension-accelerate").AccelerateInvalidateInput) => Promise<{
                    requestId: string;
                }>;
                invalidateAll: () => Promise<{
                    requestId: string;
                }>;
            };
        };
    }, {}>, import("../../generated/prisma").Prisma.TypeMapCb<import("../../generated/prisma").Prisma.PrismaClientOptions>, {
        result: {};
        model: {
            $allModels: {
                aggregate: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "aggregate">>;
                count: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "count">>;
                findFirst: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findFirst"> | null>;
                findFirstOrThrow: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findFirstOrThrow">>;
                findMany: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findMany">>;
                findUnique: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findUnique"> | null>;
                findUniqueOrThrow: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findUniqueOrThrow">>;
                groupBy: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "groupBy">>;
            };
            absence: {
                aggregate: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "aggregate">>;
                count: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "count">>;
                findFirst: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findFirst"> | null>;
                findFirstOrThrow: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findFirstOrThrow">>;
                findMany: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findMany">>;
                findUnique: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findUnique"> | null>;
                findUniqueOrThrow: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findUniqueOrThrow">>;
                groupBy: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "groupBy">>;
            };
            company: {
                aggregate: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "aggregate">>;
                count: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "count">>;
                findFirst: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findFirst"> | null>;
                findFirstOrThrow: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findFirstOrThrow">>;
                findMany: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findMany">>;
                findUnique: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findUnique"> | null>;
                findUniqueOrThrow: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findUniqueOrThrow">>;
                groupBy: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "groupBy">>;
            };
            employee: {
                aggregate: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "aggregate">>;
                count: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "count">>;
                findFirst: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findFirst"> | null>;
                findFirstOrThrow: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findFirstOrThrow">>;
                findMany: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findMany">>;
                findUnique: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findUnique"> | null>;
                findUniqueOrThrow: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findUniqueOrThrow">>;
                groupBy: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "groupBy">>;
            };
            ticket: {
                aggregate: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "aggregate">>;
                count: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "count">>;
                findFirst: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findFirst"> | null>;
                findFirstOrThrow: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findFirstOrThrow">>;
                findMany: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findMany">>;
                findUnique: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findUnique"> | null>;
                findUniqueOrThrow: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findUniqueOrThrow">>;
                groupBy: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "groupBy">>;
            };
            snack: {
                aggregate: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "aggregate">>;
                count: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "count">>;
                findFirst: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findFirst"> | null>;
                findFirstOrThrow: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findFirstOrThrow">>;
                findMany: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findMany">>;
                findUnique: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findUnique"> | null>;
                findUniqueOrThrow: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findUniqueOrThrow">>;
                groupBy: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "groupBy">>;
            };
            user: {
                aggregate: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "aggregate"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "aggregate">>;
                count: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "count"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "count">>;
                findFirst: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findFirst"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findFirst"> | null>;
                findFirstOrThrow: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findFirstOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findFirstOrThrow">>;
                findMany: () => <T, A>(this: T, args?: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findMany"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findMany">>;
                findUnique: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findUnique"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findUnique"> | null>;
                findUniqueOrThrow: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "findUniqueOrThrow"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "findUniqueOrThrow">>;
                groupBy: () => <T, A>(this: T, args: import("@prisma/client/runtime/library").Exact<A, import("@prisma/client/runtime/library").Args<T, "groupBy"> & import("@prisma/extension-accelerate").PrismaCacheStrategy>) => import("@prisma/extension-accelerate").AcceleratePromise<import("@prisma/client/runtime/library").Result<T, A, "groupBy">>;
            };
        };
        query: {};
        client: {
            $accelerate: () => {
                invalidate: (input: import("@prisma/extension-accelerate").AccelerateInvalidateInput) => Promise<{
                    requestId: string;
                }>;
                invalidateAll: () => Promise<{
                    requestId: string;
                }>;
            };
        };
    }>;
}
